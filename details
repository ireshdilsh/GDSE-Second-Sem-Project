Great! Since you're using **Angular** for the frontend, here's the updated project plan tailored for an **Angular + Spring Boot** stack:

---

## ✅ Updated Project: **Online Course Buying Website**

### 🔧 Tech Stack

| Layer      | Technology                      |
| ---------- | ------------------------------- |
| Frontend   | **Angular** (v15+ recommended)  |
| Backend    | **Spring Boot** (REST API)      |
| Database   | MySQL (or H2 for local dev)     |
| Security   | JWT (optional), Spring Security |
| Build Tool | Maven or Gradle                 |

---

## 🎯 Updated MVP Features (Angular + Spring Boot)

### 👤 1. **User System**

* 🔒 Angular login/register forms with form validation
* User roles: Student (Buyer) & Admin
* Use JWT for secure login/authentication (optional)

### 📚 2. **Course Management**

* Angular admin dashboard to:

  * Add/edit/delete courses
  * Use reactive forms
* Students can:

  * View course catalog with filters
  * Click to see course details (course ID route param)

### 🛒 3. **Cart & Purchase**

* Add course to cart (use Angular service + local storage or reactive state like NgRx)
* Checkout button triggers backend save
* Confirmation screen after “purchase”

### 📂 4. **My Courses**

* After purchase, show a dashboard (`/my-courses`) with bought course titles

---

## 🌐 Angular Folder Structure (Suggestion)

```
src/app
├── components
│   ├── course-list
│   ├── course-detail
│   ├── cart
│   ├── my-courses
│   └── admin-dashboard
├── services
│   └── course.service.ts
├── models
│   └── course.model.ts
├── pages
│   ├── login
│   └── register
└── app-routing.module.ts
```

---

## 🔁 API Integration Plan

| Endpoint (Spring Boot)   | Angular Call                 | Description           |
| ------------------------ | ---------------------------- | --------------------- |
| `GET /api/courses`       | `courseService.getCourses()` | List all courses      |
| `GET /api/courses/{id}`  | `getCourse(id)`              | Single course details |
| `POST /api/cart`         | `addToCart(course)`          | Simulated cart        |
| `POST /api/purchase`     | `checkout(cart)`             | Save purchase         |
| `GET /api/my-courses`    | `getMyCourses()`             | Get user's courses    |
| `POST /api/admin/course` | `adminAddCourse()`           | Admin adds new        |

---

## 🖼️ Angular UI Pages You Can Create

1. `HomeComponent` – Featured courses
2. `CourseListComponent` – All courses (with category filters)
3. `CourseDetailComponent` – Add to cart view
4. `CartComponent` – View & checkout cart
5. `MyCoursesComponent` – After purchase dashboard
6. `LoginComponent` / `RegisterComponent`
7. `AdminDashboardComponent` – Manage courses

---

## 🔐 Optional JWT Flow

1. Angular sends `login()` → Spring Boot issues JWT token
2. Store JWT in `localStorage`
3. Angular includes JWT in Authorization header (`Bearer <token>`)
4. Spring validates it with filter (Spring Security)

---

## 🚀 Want Next?

Would you like me to generate:

* ✅ REST API structure (Spring Boot)?
* ✅ Angular service and model templates?
* ✅ Use case diagram?
* ✅ ERD or MySQL schema?

Just tell me what you'd like next!
